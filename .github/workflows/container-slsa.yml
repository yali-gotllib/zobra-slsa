name: Container SLSA Build

on:
  push:
    tags:
      - 'container-v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to generate provenance for (e.g., container-v1.0.0)'
        required: true
        default: 'container-v1.0.0'
      registry:
        description: 'Container registry (ghcr.io, docker.io, etc.)'
        required: false
        default: 'ghcr.io'
        type: string
      dockerfile_path:
        description: 'Path to Dockerfile (default: ./Dockerfile)'
        required: false
        default: './Dockerfile'
        type: string
      build_context:
        description: 'Build context directory (default: .)'
        required: false
        default: '.'
        type: string
      additional_registries:
        description: 'Additional registries to authenticate (JSON array: ["registry1.com", "registry2.com"])'
        required: false
        default: '[]'
        type: string
      image_name:
        description: 'Full image name (e.g., "johndoe/myapp", "company/team/myapp"). If empty, uses GitHub repository name.'
        required: false
        default: ''
        type: string


permissions: read-all

env:
  IMAGE_REGISTRY: ${{ github.event.inputs.registry || 'ghcr.io' }}
  IMAGE_NAME: ${{ github.event.inputs.image_name || github.repository }}

jobs:
  # This step builds our image, pushes it, and outputs the repo hash digest.
  build:
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.digest.outputs.digest }}
      registry_username: ${{ steps.registry-creds.outputs.username }}
      registry_password_secret: ${{ steps.registry-creds.outputs.password_secret }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Validate and Configure Image Naming
        run: |
          set -euo pipefail
          echo "🏷️  Configuring container image naming..."

          REGISTRY="${{ env.IMAGE_REGISTRY }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"

          echo "📋 Current configuration:"
          echo "   Registry: $REGISTRY"
          echo "   Image Name: $IMAGE_NAME"

          # Provide registry-specific naming guidance
          echo ""
          echo "💡 Registry-specific naming requirements:"
          case "$REGISTRY" in
            "docker.io"|"index.docker.io"|"")
              echo "   🐳 Docker Hub: username/repository (no hyphens in username)"
              echo "   Example: johndoe/myapp (not john-doe/myapp)"
              ;;
            "quay.io")
              echo "   🔴 Quay.io: username/repository or organization/repository"
              echo "   Example: jdoe/myapp or company/myapp"
              ;;
            "ghcr.io")
              echo "   🐙 GitHub Container Registry: Uses GitHub repository name by default"
              echo "   Example: ${{ github.repository }} (automatic)"
              ;;
            *)
              echo "   🏢 Custom Registry: $REGISTRY"
              echo "   Check your registry's naming conventions"
              ;;
          esac

          # Validate image name format
          if [[ "$IMAGE_NAME" == *" "* ]]; then
            echo "❌ Error: Image name cannot contain spaces: '$IMAGE_NAME'"
            exit 1
          fi

          if [[ "$IMAGE_NAME" == *"_"* ]] && [[ "$REGISTRY" == "docker.io" || "$REGISTRY" == "index.docker.io" || "$REGISTRY" == "" ]]; then
            echo "⚠️  Warning: Docker Hub doesn't allow underscores in repository names"
            echo "   Current: $IMAGE_NAME"
            echo "   Consider: $(echo "$IMAGE_NAME" | tr '_' '-')"
          fi

          # Show final image URL
          FULL_IMAGE="$REGISTRY/$IMAGE_NAME"
          echo ""
          echo "🎯 Final image will be: $FULL_IMAGE"
          echo "✅ Image naming configuration complete"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Multiple Registries
        run: |
          set -euo pipefail
          echo "🔐 Setting up multi-registry authentication..."

          # Function to authenticate to a registry
          authenticate_registry() {
            local registry="$1"
            local username_var="$2"
            local password_var="$3"
            local username="${!username_var:-}"
            local password="${!password_var:-}"

            if [ -n "$username" ] && [ -n "$password" ]; then
              echo "🔑 Authenticating to $registry..."
              echo "$password" | docker login "$registry" --username "$username" --password-stdin
              echo "✅ Successfully authenticated to $registry"
            else
              echo "⚠️  No credentials found for $registry (${username_var}/${password_var})"
              echo "💡 Skipping authentication - assuming public registry or already authenticated"
            fi
          }

          # Authenticate to target registry (where we push)
          case "${{ env.IMAGE_REGISTRY }}" in
            "ghcr.io")
              echo "🐙 Authenticating to GitHub Container Registry..."
              echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username "${{ github.actor }}" --password-stdin
              echo "✅ GitHub Container Registry authenticated"
              ;;
            "docker.io"|"index.docker.io"|"")
              authenticate_registry "docker.io" "DOCKER_USERNAME" "DOCKER_PASSWORD"
              ;;
            *)
              # Custom registry - use generic credentials
              authenticate_registry "${{ env.IMAGE_REGISTRY }}" "REGISTRY_USERNAME" "REGISTRY_PASSWORD"
              ;;
          esac

          # Authenticate to additional registries for pulling base images
          ADDITIONAL_REGISTRIES='${{ github.event.inputs.additional_registries }}'
          if [ "$ADDITIONAL_REGISTRIES" != "[]" ] && [ "$ADDITIONAL_REGISTRIES" != "" ]; then
            echo "🌍 Authenticating to additional registries..."
            echo "⚠️  Note: Additional registry authentication requires predefined environment variables"
            echo "💡 Only the following registries are supported for additional authentication:"
            echo "   - registry.access.redhat.com (REDHAT_USERNAME/REDHAT_PASSWORD)"
            echo "   - gcr.io (GCR_USERNAME/GCR_PASSWORD)"
            echo "   - public.ecr.aws (ECR_USERNAME/ECR_PASSWORD)"
            echo "   - mcr.microsoft.com (AZURE_USERNAME/AZURE_PASSWORD)"
            echo "   - quay.io (QUAY_IO_USERNAME/QUAY_IO_PASSWORD)"
            echo ""
            echo "🔧 For other registries, ensure they are public or use manual authentication"
          fi

          # Common registry authentications (with fallback credentials)
          echo "🔧 Setting up common registry authentications..."

          # Red Hat Registry
          authenticate_registry "registry.access.redhat.com" "REDHAT_USERNAME" "REDHAT_PASSWORD"

          # Google Container Registry
          authenticate_registry "gcr.io" "GCR_USERNAME" "GCR_PASSWORD"

          # Amazon ECR (if credentials available)
          authenticate_registry "public.ecr.aws" "ECR_USERNAME" "ECR_PASSWORD"

          # Azure Container Registry
          authenticate_registry "mcr.microsoft.com" "AZURE_USERNAME" "AZURE_PASSWORD"

          # Quay.io
          authenticate_registry "quay.io" "QUAY_IO_USERNAME" "QUAY_IO_PASSWORD"

          echo "🎯 Multi-registry authentication setup complete!"
        env:
          # Target registry credentials
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

          # Common registry credentials (optional)
          REDHAT_USERNAME: ${{ secrets.REDHAT_USERNAME }}
          REDHAT_PASSWORD: ${{ secrets.REDHAT_PASSWORD }}
          GCR_USERNAME: ${{ secrets.GCR_USERNAME }}
          GCR_PASSWORD: ${{ secrets.GCR_PASSWORD }}
          ECR_USERNAME: ${{ secrets.ECR_USERNAME }}
          ECR_PASSWORD: ${{ secrets.ECR_PASSWORD }}
          AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
          AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}

          # Dynamic registry credentials (customers add as needed)
          REGISTRY_ACCESS_REDHAT_COM_USERNAME: ${{ secrets.REGISTRY_ACCESS_REDHAT_COM_USERNAME }}
          REGISTRY_ACCESS_REDHAT_COM_PASSWORD: ${{ secrets.REGISTRY_ACCESS_REDHAT_COM_PASSWORD }}
          QUAY_IO_USERNAME: ${{ secrets.QUAY_IO_USERNAME }}
          QUAY_IO_PASSWORD: ${{ secrets.QUAY_IO_PASSWORD }}
          COMPANY_AZURECR_IO_USERNAME: ${{ secrets.COMPANY_AZURECR_IO_USERNAME }}
          COMPANY_AZURECR_IO_PASSWORD: ${{ secrets.COMPANY_AZURECR_IO_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ github.event.inputs.tag }},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ${{ github.event.inputs.build_context || '.' }}
          file: ${{ github.event.inputs.dockerfile_path || './Dockerfile' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install crane
        uses: imjasonh/setup-crane@v0.4

      - name: Get image digest
        id: digest
        run: |
          # Get the first tag from the metadata output
          tag=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
          digest=$(crane digest "$tag")
          echo "digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Determine Registry Credentials for Provenance
        id: registry-creds
        run: |
          set -euo pipefail
          echo "🔐 Determining registry credentials for SLSA provenance..."

          REGISTRY="${{ env.IMAGE_REGISTRY }}"

          case "$REGISTRY" in
            "ghcr.io")
              echo "🐙 Using GitHub Container Registry credentials"
              echo "username=${{ github.actor }}" >> "$GITHUB_OUTPUT"
              echo "password_secret=GITHUB_TOKEN" >> "$GITHUB_OUTPUT"
              ;;
            "docker.io"|"index.docker.io"|"")
              echo "🐳 Using Docker Hub credentials"
              DOCKER_USER="${{ secrets.DOCKER_USERNAME }}"
              if [ -n "$DOCKER_USER" ]; then
                echo "username=$DOCKER_USER" >> "$GITHUB_OUTPUT"
                echo "password_secret=DOCKER_PASSWORD" >> "$GITHUB_OUTPUT"
              else
                echo "❌ Error: DOCKER_USERNAME secret not configured for Docker Hub"
                exit 1
              fi
              ;;
            *)
              echo "🏢 Using custom registry credentials"
              REGISTRY_USER="${{ secrets.REGISTRY_USERNAME }}"
              if [ -n "$REGISTRY_USER" ]; then
                echo "username=$REGISTRY_USER" >> "$GITHUB_OUTPUT"
                echo "password_secret=REGISTRY_PASSWORD" >> "$GITHUB_OUTPUT"
              else
                echo "❌ Error: REGISTRY_USERNAME secret not configured for $REGISTRY"
                exit 1
              fi
              ;;
          esac

          echo "✅ Registry credentials determined for provenance"

      - name: Output image
        id: image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"

  # This step calls the container workflow to generate provenance and push it to
  # the container registry.
  provenance:
    needs: [build]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ needs.build.outputs.registry_username }}
      private-repository: ${{ github.event.repository.private }}
    secrets:
      registry-password: ${{ secrets[needs.build.outputs.registry_password_secret] }}
