# Professional Container SLSA Workflow
# Generates SLSA Level 3 provenance for container images
# Supports major container registries with proven SLSA compatibility

name: Professional Container SLSA Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to generate provenance for (e.g., container-v1.0.0)'
        required: true
        default: 'container-v1.0.0'
      registry:
        description: 'Container registry (ghcr.io, docker.io, gcr.io, ECR, ACR)'
        required: false
        default: 'ghcr.io'
        type: choice
        options:
          - 'ghcr.io'
          - 'docker.io'
          - 'gcr.io'
          - 'custom'
      dockerfile_path:
        description: 'Path to Dockerfile (default: ./Dockerfile)'
        required: false
        default: './Dockerfile'
        type: string
      build_context:
        description: 'Build context directory (default: .)'
        required: false
        default: '.'
        type: string
      image_name:
        description: 'Full image name (e.g., "johndoe/myapp"). If empty, uses GitHub repository name.'
        required: false
        default: ''
        type: string
      custom_registry:
        description: 'Custom registry URL (only when registry=custom). SLSA compatibility not guaranteed.'
        required: false
        default: ''
        type: string

permissions:
  contents: read
  packages: write
  id-token: write
  actions: read

env:
  IMAGE_REGISTRY: ${{ github.event.inputs.registry == 'custom' && github.event.inputs.custom_registry || github.event.inputs.registry || 'ghcr.io' }}
  IMAGE_NAME: ${{ github.event.inputs.image_name || github.repository }}

jobs:
  # Build and push container image
  build:
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.digest.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Validate Registry and Configure Image Naming
        run: |
          set -euo pipefail
          echo "Validating registry and configuring container image naming..."

          REGISTRY="${{ env.IMAGE_REGISTRY }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"

          # Validate registry is supported for SLSA provenance
          case "$REGISTRY" in
            "ghcr.io")
              echo "✅ GitHub Container Registry - Full SLSA support"
              ;;
            "docker.io"|"index.docker.io"|"")
              echo "✅ Docker Hub - Proven SLSA compatibility"
              ;;
            "gcr.io"|"*.gcr.io")
              echo "✅ Google Container Registry - SLSA supported"
              ;;
            "*.dkr.ecr.*.amazonaws.com")
              echo "✅ Amazon ECR - Cloud provider registry"
              ;;
            "*.azurecr.io")
              echo "✅ Azure Container Registry - Cloud provider registry"
              ;;
            *)
              if [[ "${{ github.event.inputs.registry }}" == "custom" ]]; then
                echo "⚠️  Custom registry: $REGISTRY"
                echo "⚠️  SLSA provenance compatibility not guaranteed"
                echo "⚠️  Supported registries: ghcr.io, docker.io, gcr.io, ECR, ACR"
              else
                echo "❌ Unsupported registry: $REGISTRY"
                echo "❌ This workflow supports proven SLSA-compatible registries only"
                echo "✅ Supported: ghcr.io, docker.io, gcr.io, ECR, ACR"
                echo "💡 Use 'custom' option for experimental registries"
                exit 1
              fi
              ;;
          esac

          echo "Registry: $REGISTRY"
          echo "Image Name: $IMAGE_NAME"

          # Show final image URL
          FULL_IMAGE="$REGISTRY/$IMAGE_NAME"
          echo "Final image will be: $FULL_IMAGE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3



      - name: Universal Registry Authentication
        run: |
          set -euo pipefail
          echo "Setting up universal registry authentication..."
          
          REGISTRY="${{ env.IMAGE_REGISTRY }}"
          
          if [ "$REGISTRY" = "ghcr.io" ]; then
            # GitHub Container Registry uses GitHub token
            echo "Authenticating to GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username "${{ github.actor }}" --password-stdin
          else
            # ALL other registries use the universal pattern
            echo "Authenticating to $REGISTRY using universal credentials..."
            echo "Using REGISTRY_USERNAME and REGISTRY_PASSWORD secrets"
            
            if [ -z "${{ secrets.REGISTRY_USERNAME }}" ] || [ -z "${{ secrets.REGISTRY_PASSWORD }}" ]; then
              echo "Error: REGISTRY_USERNAME and REGISTRY_PASSWORD secrets must be configured"
              echo "These secrets work for ANY registry: docker.io, quay.io, ECR, ACR, etc."
              exit 1
            fi

            echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login "$REGISTRY" --username "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
          fi
          
          echo "Universal registry authentication complete"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ${{ github.event.inputs.build_context || '.' }}
          file: ${{ github.event.inputs.dockerfile_path || './Dockerfile' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install crane (if needed)
        run: |
          set -euo pipefail
          echo "🔧 Checking for crane command..."

          if command -v crane >/dev/null 2>&1; then
            echo "✅ crane is already available"
            crane version
          else
            echo "📦 Installing crane..."

            # Detect architecture
            ARCH=$(uname -m)
            case $ARCH in
              x86_64) ARCH="x86_64" ;;
              aarch64|arm64) ARCH="arm64" ;;
              *) echo "❌ Unsupported architecture: $ARCH"; exit 1 ;;
            esac

            # Get latest crane release
            CRANE_VERSION=$(curl -s https://api.github.com/repos/google/go-containerregistry/releases/latest | grep '"tag_name"' | cut -d'"' -f4)
            echo "📥 Installing crane $CRANE_VERSION for $ARCH..."

            # Download and install crane
            curl -sL "https://github.com/google/go-containerregistry/releases/download/${CRANE_VERSION}/go-containerregistry_Linux_${ARCH}.tar.gz" | tar xz
            sudo mv crane /usr/local/bin/
            sudo chmod +x /usr/local/bin/crane

            echo "✅ crane installed successfully"
            crane version
          fi

      - name: Extract digest
        id: digest
        run: |
          # Get the first tag from the metadata output
          tag=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
          digest=$(crane digest "$tag")
          echo "digest=$digest" >> "$GITHUB_OUTPUT"



      - name: Output image
        id: image
        run: |
          # Set the image as an output
          image_name="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"
          echo "DEBUG: Final image name = $image_name"



  # Generate SLSA provenance for GitHub Container Registry
  provenance-ghcr:
    needs: [build]
    permissions:
      actions: read
      id-token: write
      packages: write
    if: (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch') && github.event.inputs.registry == 'ghcr.io'
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ github.event.inputs.registry }}/${{ github.event.inputs.image_name || github.repository }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ github.actor }}
      private-repository: ${{ github.event.repository.private }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Generate SLSA provenance for all other registries
  provenance-other:
    needs: [build]
    permissions:
      actions: read
      id-token: write
      packages: write
    if: (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch') && github.event.inputs.registry != 'ghcr.io'
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ github.event.inputs.registry }}/${{ github.event.inputs.image_name || github.repository }}
      digest: ${{ needs.build.outputs.digest }}
      private-repository: ${{ github.event.repository.private }}
    secrets:
      registry-username: ${{ secrets.REGISTRY_USERNAME }}
      registry-password: ${{ secrets.REGISTRY_PASSWORD }}
