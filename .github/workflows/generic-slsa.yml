name: Generic SLSA Provenance

on:
  push:
    tags:
      - 'v*'
      - 'go-v*'
      - 'py-v*'
      - 'node-v*'
  workflow_dispatch:
    inputs:
      artifact_type:
        description: 'Type of artifact being built (e.g., rust, java, go, cpp, python, nodejs, etc.)'
        required: true
        type: string
      tag:
        description: 'Tag to generate provenance for'
        required: false
        default: ''
      build_command:
        description: 'Command to build your artifacts (e.g., "cargo build --release", "mvn clean package")'
        required: true
        type: string
      artifact_pattern:
        description: 'Pattern to match built artifacts (e.g., "target/release/*", "target/*.jar")'
        required: true
        type: string

permissions: read-all

jobs:
  # Validate inputs and set build parameters
  detect:
    runs-on: ubuntu-latest
    outputs:
      artifact_type: ${{ steps.validate.outputs.artifact_type }}
      build_command: ${{ steps.validate.outputs.build_command }}
      setup_command: ${{ steps.validate.outputs.setup_command }}
      artifact_pattern: ${{ steps.validate.outputs.artifact_pattern }}
      artifact_path: ${{ steps.validate.outputs.artifact_path }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Validate inputs and set build parameters
        id: validate
        run: |
          set -euo pipefail
          echo "🔍 Validating generic build inputs..."

          # Get inputs
          ARTIFACT_TYPE="${{ github.event.inputs.artifact_type }}"
          BUILD_COMMAND="${{ github.event.inputs.build_command }}"
          ARTIFACT_PATTERN="${{ github.event.inputs.artifact_pattern }}"

          # Validate required inputs
          if [ -z "$ARTIFACT_TYPE" ]; then
            echo "❌ artifact_type is required"
            echo "� Specify the type of artifacts being built (e.g., 'rust', 'java', 'go', 'cpp', etc.)"
            echo ""
            echo "🔧 This workflow is completely generic and treats ALL languages equally"
            echo "� See README_GENERIC_SLSA.md for complete documentation"
            exit 1
          fi

          if [ -z "$BUILD_COMMAND" ]; then
            echo "❌ build_command is required"
            echo "� Specify the command to build your artifacts"
            echo ""
            echo "� Example build commands for any language:"
            echo "   Rust: 'cargo build --release'"
            echo "   Java: 'mvn clean package'"
            echo "   Go:   'go build -o myapp .'"
            echo "   C++:  'cmake .. && make'"
            echo "   Zig:  'zig build -Doptimize=ReleaseFast'"
            echo "   C#:   'dotnet build --configuration Release'"
            echo "   Python: 'python -m build'"
            echo "   Node.js: 'npm run build && npm pack'"
            echo ""
            echo "📚 See README_GENERIC_SLSA.md for complete documentation"
            exit 1
          fi

          if [ -z "$ARTIFACT_PATTERN" ]; then
            echo "❌ artifact_pattern is required"
            echo "💡 Specify the pattern to match your built artifacts"
            echo ""
            echo "🔧 Example artifact patterns for any language:"
            echo "   Rust: 'target/release/*'"
            echo "   Java: 'target/*.jar'"
            echo "   Go:   'myapp'"
            echo "   C++:  'build/*'"
            echo "   Zig:  'zig-out/bin/*'"
            echo "   C#:   'bin/Release/net8.0/*'"
            echo "   Python: 'dist/*'"
            echo "   Node.js: '*.tgz'"
            echo ""
            echo "📚 See README_GENERIC_SLSA.md for complete documentation"
            exit 1
          fi

          # Set artifact path (always current directory for generic builds)
          ARTIFACT_PATH="."

          echo "🎯 Generic build configuration:"
          echo "   artifact_type: $ARTIFACT_TYPE"
          echo "   build_command: $BUILD_COMMAND"
          echo "   artifact_pattern: $ARTIFACT_PATTERN"
          echo "   artifact_path: $ARTIFACT_PATH"

          # Set outputs
          echo "artifact_type=$ARTIFACT_TYPE" >> "$GITHUB_OUTPUT"
          echo "build_command=$BUILD_COMMAND" >> "$GITHUB_OUTPUT"
          echo "setup_command=echo 'Generic setup - no specific setup required'" >> "$GITHUB_OUTPUT"
          echo "artifact_pattern=$ARTIFACT_PATTERN" >> "$GITHUB_OUTPUT"
          echo "artifact_path=$ARTIFACT_PATH" >> "$GITHUB_OUTPUT"

          echo "✅ Generic configuration complete for $ARTIFACT_TYPE"

  # Build artifacts based on detected/specified type
  build:
    needs: [detect]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      artifact_type: ${{ needs.detect.outputs.artifact_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      # Setup environment based on artifact type
      - name: Setup Go
        if: needs.detect.outputs.artifact_type == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Python
        if: needs.detect.outputs.artifact_type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Setup Node.js
        if: needs.detect.outputs.artifact_type == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Smart dependency installation for generic builds
      - name: Auto-install dependencies for generic builds
        if: needs.detect.outputs.artifact_type == 'generic'
        run: |
          set -euo pipefail
          echo "🔍 Analyzing build command for required dependencies..."

          BUILD_CMD="${{ needs.detect.outputs.build_command }}"
          echo "Build command: $BUILD_CMD"

          # Function to check if command exists
          command_exists() {
            command -v "$1" >/dev/null 2>&1
          }

          # Function to install Rust
          install_rust() {
            echo "🦀 Installing Rust toolchain..."
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
            # Set environment variables for GitHub Actions
            echo "PATH=$PATH" >> $GITHUB_ENV
            echo "CARGO_HOME=$CARGO_HOME" >> $GITHUB_ENV
            echo "RUSTUP_HOME=$RUSTUP_HOME" >> $GITHUB_ENV
            echo "✅ Rust installed: $(rustc --version)"
            echo "🔧 Rust environment configured for workflow"
          }

          # Function to install Zig
          install_zig() {
            echo "🦎 Installing Zig..."
            ZIG_VERSION="0.11.0"
            wget -q "https://ziglang.org/download/${ZIG_VERSION}/zig-linux-x86_64-${ZIG_VERSION}.tar.xz"
            tar -xf "zig-linux-x86_64-${ZIG_VERSION}.tar.xz"
            sudo mv "zig-linux-x86_64-${ZIG_VERSION}" /opt/zig
            sudo ln -sf /opt/zig/zig /usr/local/bin/zig
            # Add to PATH for current workflow
            echo "/opt/zig" >> $GITHUB_PATH
            echo "✅ Zig installed: $(zig version)"
            echo "🔧 Zig environment configured for workflow"
          }

          # Function to install Maven
          install_maven() {
            echo "☕ Installing Maven..."
            sudo apt-get update -q
            sudo apt-get install -y maven
            echo "✅ Maven installed: $(mvn --version | head -1)"
          }

          # Function to install .NET
          install_dotnet() {
            echo "🔷 Installing .NET SDK..."
            wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update -q
            sudo apt-get install -y dotnet-sdk-8.0
            echo "✅ .NET installed: $(dotnet --version)"
          }

          # Function to install CMake
          install_cmake() {
            echo "🏗️ Installing CMake..."
            sudo apt-get update -q
            sudo apt-get install -y cmake build-essential
            echo "✅ CMake installed: $(cmake --version | head -1)"
          }

          # Function to install Ruby
          install_ruby() {
            echo "💎 Installing Ruby..."
            sudo apt-get update -q
            sudo apt-get install -y ruby-full rubygems
            echo "✅ Ruby installed: $(ruby --version)"
          }

          # Function to install PHP
          install_php() {
            echo "🐘 Installing PHP and Composer..."
            sudo apt-get update -q
            sudo apt-get install -y php php-cli php-mbstring php-xml unzip
            curl -sS https://getcomposer.org/installer | php
            sudo mv composer.phar /usr/local/bin/composer
            echo "✅ PHP installed: $(php --version | head -1)"
            echo "✅ Composer installed: $(composer --version)"
          }

          # UNIVERSAL: Extract and install ALL missing commands
          echo "🔍 Extracting commands from build command..."

          # Extract commands, excluding flags and common shell words
          COMMANDS=$(echo "$BUILD_CMD" | grep -oE '\b[a-zA-Z][a-zA-Z0-9_-]*\b' | \
                     grep -v '^[0-9]*$' | \
                     grep -v '^--' | \
                     grep -v '^-' | \
                     grep -v '^release$' | \
                     grep -v '^debug$' | \
                     grep -v '^build$' | \
                     grep -v '^clean$' | \
                     grep -v '^test$' | \
                     grep -v '^install$' | \
                     grep -v '^package$' | \
                     grep -v '^run$' | \
                     sort -u)
          echo "📋 Commands found: $COMMANDS"

          # Function to attempt universal installation
          universal_install() {
            local cmd="$1"
            echo "🔧 Attempting to install: $cmd"

            # Known installations (fast path)
            case "$cmd" in
              "cargo"|"rustc") install_rust ;;
              "zig") install_zig ;;
              "mvn") install_maven ;;
              "dotnet") install_dotnet ;;
              "cmake") install_cmake ;;
              "gem") install_ruby ;;
              "composer") install_php ;;
              "go")
                echo "🐹 Installing Go..."
                sudo rm -rf /usr/local/go
                wget -q https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
                sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
                echo "/usr/local/go/bin" >> $GITHUB_PATH
                echo "✅ Go installed: $(/usr/local/go/bin/go version)"
                ;;
              "npm"|"node")
                echo "📦 Installing Node.js/NPM..."
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                sudo apt-get install -y nodejs
                echo "✅ Node.js installed: $(node --version)"
                ;;
              "pip"|"python3")
                echo "🐍 Installing Python/pip..."
                sudo apt-get update -q
                sudo apt-get install -y python3 python3-pip
                echo "✅ Python installed: $(python3 --version)"
                ;;
              "bazel")
                echo "🏗️ Installing Bazel..."
                curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
                sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
                echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
                sudo apt-get update -q && sudo apt-get install -y bazel
                echo "✅ Bazel installed: $(bazel --version)"
                ;;
              "ninja")
                echo "🥷 Installing Ninja..."
                sudo apt-get update -q && sudo apt-get install -y ninja-build
                echo "✅ Ninja installed: $(ninja --version)"
                ;;
              "scons")
                echo "🔨 Installing SCons..."
                sudo apt-get update -q && sudo apt-get install -y scons
                echo "✅ SCons installed: $(scons --version)"
                ;;
              "make")
                echo "🔧 Installing Make..."
                sudo apt-get update -q && sudo apt-get install -y build-essential
                echo "✅ Make installed: $(make --version | head -1)"
                ;;
              *)
                # Universal fallback: try apt, snap, or warn
                echo "🌍 Attempting universal installation for: $cmd"
                if sudo apt-get update -q && sudo apt-get install -y "$cmd" 2>/dev/null; then
                  echo "✅ $cmd installed via apt"
                elif sudo snap install "$cmd" 2>/dev/null; then
                  echo "✅ $cmd installed via snap"
                else
                  echo "⚠️ Could not auto-install $cmd - build may fail"
                  echo "💡 Consider adding manual installation for $cmd"
                fi
                ;;
            esac
          }

          # Check and install each command
          for cmd in $COMMANDS; do
            # Skip common shell keywords, operators, and build flags
            case "$cmd" in
              "if"|"then"|"else"|"fi"|"for"|"do"|"done"|"while"|"case"|"esac"|"function"|"return"|"exit"|"echo"|"cd"|"ls"|"mkdir"|"rm"|"cp"|"mv"|"cat"|"grep"|"sed"|"awk"|"sort"|"uniq"|"head"|"tail"|"wc"|"find"|"xargs"|"tar"|"gzip"|"gunzip"|"wget"|"curl"|"git"|"sudo"|"apt"|"snap"|"pip"|"sh"|"bash"|"zsh"|"fish"|"and"|"or"|"not"|"true"|"false"|"yes"|"no"|"with"|"from"|"import"|"export"|"set"|"unset"|"source"|"alias"|"which"|"type"|"command")
                echo "⏭️ Skipping shell keyword: $cmd"
                ;;
              *)
                if ! command_exists "$cmd"; then
                  universal_install "$cmd"
                else
                  echo "✅ $cmd already available: $(command -v $cmd)"
                fi
                ;;
            esac
          done

          echo "🎯 Dependency installation complete!"

          # Universal environment refresh for all installed tools
          echo "🔄 Refreshing environment for all installed tools..."

          # Reload system environment
          source /etc/environment 2>/dev/null || true

          # Ensure common tool paths are in PATH
          export PATH="/usr/local/bin:/opt/zig:$HOME/.cargo/bin:$PATH"

          # Update GitHub Actions environment universally
          echo "PATH=$PATH" >> $GITHUB_ENV

          # Verify all tools are accessible
          echo "🔍 Verifying installed tools accessibility:"
          for tool in cargo rustc zig mvn dotnet cmake gem composer php; do
            if command -v "$tool" >/dev/null 2>&1; then
              echo "✅ $tool: $(command -v $tool)"
            else
              echo "❌ $tool: not found in PATH"
            fi
          done

          echo "🌍 Universal environment setup complete!"



      # Run setup commands
      - name: Setup dependencies
        run: |
          echo "🔧 Running setup for ${{ needs.detect.outputs.artifact_type }}..."
          ${{ needs.detect.outputs.setup_command }}

      # Build artifacts
      - name: Build artifacts
        run: |
          echo "🏗️ Building artifacts for ${{ needs.detect.outputs.artifact_type }}..."
          echo "🔧 Build command: ${{ needs.detect.outputs.build_command }}"
          echo "📁 Working directory: $(pwd)"
          echo "🛠️ Available tools:"
          which cargo || echo "❌ cargo not found"
          which rustc || echo "❌ rustc not found"
          which zig || echo "❌ zig not found"
          echo "🌍 Environment:"
          echo "PATH=$PATH"
          echo "CARGO_HOME=$CARGO_HOME"
          echo "RUSTUP_HOME=$RUSTUP_HOME"

          echo "🚀 Executing build command..."
          ${{ needs.detect.outputs.build_command }}
          
          echo "📦 Built artifacts:"
          if [ "${{ needs.detect.outputs.artifact_path }}" != "." ]; then
            ls -la "${{ needs.detect.outputs.artifact_path }}/" || echo "No artifacts in specified path"
          else
            ls -la ${{ needs.detect.outputs.artifact_pattern }} || echo "No artifacts matching pattern"
          fi

      # Generate hashes for SLSA provenance
      - name: Generate subject hashes
        id: hash
        run: |
          set -euo pipefail
          echo "🔍 Generating hashes for SLSA provenance..."

          cd "${{ needs.detect.outputs.artifact_path }}"

          # Universal artifact finding - works for any pattern and any project structure
          echo "🔍 Looking for artifacts matching: ${{ needs.detect.outputs.artifact_pattern }}"

          # Use shell globbing with nullglob for reliable pattern matching
          shopt -s nullglob
          shopt -s globstar

          # Convert pattern to array and find all matching files
          PATTERN="${{ needs.detect.outputs.artifact_pattern }}"
          ARTIFACT_FILES=()

          # Handle different pattern types universally
          if [[ "$PATTERN" == *"/"* ]]; then
            # Pattern contains path (e.g., "target/release/*", "dist/*", "build/*")
            for file in $PATTERN; do
              if [[ -f "$file" ]]; then
                ARTIFACT_FILES+=("$file")
              fi
            done
          else
            # Pattern is just filename (e.g., "*.jar", "*.exe", "*")
            # Search recursively for the pattern
            while IFS= read -r -d '' file; do
              ARTIFACT_FILES+=("$file")
            done < <(find . -type f -name "$PATTERN" -print0 2>/dev/null)
          fi

          # If still no files, try broader search patterns
          if [[ ${#ARTIFACT_FILES[@]} -eq 0 ]]; then
            echo "🔄 Trying broader pattern matching..."

            # Try common artifact locations with the pattern
            for dir in . target/release target/debug dist build out bin; do
              if [[ -d "$dir" ]]; then
                while IFS= read -r -d '' file; do
                  ARTIFACT_FILES+=("$file")
                done < <(find "$dir" -type f -name "$PATTERN" -print0 2>/dev/null)
              fi
            done
          fi

          # Remove duplicates and sort
          if [[ ${#ARTIFACT_FILES[@]} -gt 0 ]]; then
            readarray -t ARTIFACT_FILES < <(printf '%s\n' "${ARTIFACT_FILES[@]}" | sort -u)
          fi

          if [[ ${#ARTIFACT_FILES[@]} -eq 0 ]]; then
            echo "❌ No artifacts found matching pattern: ${{ needs.detect.outputs.artifact_pattern }}"
            echo "📁 Contents of ${{ needs.detect.outputs.artifact_path }}:"
            ls -la
            echo "🔍 All files in directory tree:"
            find . -type f | head -20
            echo "💡 Common artifact locations to check:"
            for dir in target/release target/debug dist build out bin; do
              if [[ -d "$dir" ]]; then
                echo "📂 $dir/:"
                find "$dir" -type f | head -5
              fi
            done
            exit 1
          fi

          echo "📋 Found ${#ARTIFACT_FILES[@]} artifacts:"
          for file in "${ARTIFACT_FILES[@]}"; do
            ls -la "$file"
          done

          # Generate base64-encoded hashes as required by SLSA
          echo "hashes=$(sha256sum "${ARTIFACT_FILES[@]}" | base64 -w0)" >> "$GITHUB_OUTPUT"

          echo "✅ Hash generation complete"
          echo "📊 Generated hashes:"
          sha256sum "${ARTIFACT_FILES[@]}"

      # Upload artifacts for later verification
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generic-slsa-artifacts-${{ needs.detect.outputs.artifact_type }}
          path: ${{ needs.detect.outputs.artifact_path }}

  # Generate SLSA provenance using the official generic generator
  provenance:
    needs: [detect, build]
    permissions:
      actions: read   # To read the workflow path
      id-token: write # To sign the provenance
      contents: write # To add assets to a release
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true
      upload-tag-name: ${{ github.event.inputs.tag || github.ref_name }}
      provenance-name: "generic-slsa-provenance-${{ needs.build.outputs.artifact_type }}.intoto.jsonl"
      private-repository: ${{ github.event.repository.private }}
